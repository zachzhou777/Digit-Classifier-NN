/* Testbench for lfsr. */
module lfsr_tb();

// Inputs to the DUT
wire [31:0] register;
reg clk, rst_n;

// Instantiate the DUT
lfsr iDUT(.register(register), .clk(clk), .rst_n(rst_n));

// Create an array with 65,536 (i.e., 2^16) entries to record the number of occurrences of a number 
// generated by the LFSR
integer occurrences[65535:0];
integer num_reached, num_unreached, num_repeats;
integer i;	// Loop counter for iterating through array

initial begin
	// Initialize integers to 0
	for (i = 0; i < 65536; i = i + 1) occurrences[i] = 0;
	num_reached = 0;
	num_unreached = 0;
	num_repeats = 0;

	// Initialize clock and reset. Deassert reset before first positive clock edge
	clk = 0;
	rst_n = 0;
	#1 rst_n = 1;

	// "Warm up" the LFSR
	repeat(10000) @(posedge clk);

	// Sample the middle 16 bits of the register. Record each generated number in the appropriate 
	// position in the array
	repeat(100000) @(negedge clk) occurrences[register[23:8]] = occurrences[register[23:8]] + 1;
	
	// Print unreached states and the number of repeated generations of states
	for (i = 0; i < 65536; i = i + 1) begin
		if (occurrences[i] > 0) begin
			num_reached = num_reached + 1;
			num_repeats = num_repeats + occurrences[i] - 1;
		end
		else begin
			num_unreached = num_unreached + 1;
			$display("%d was never reached", i);
		end
	end
	$display("%d reached states\n%d unreached states\n%d repeated generations", 
				num_reached, num_unreached, num_repeats);

	$stop;
end

// Clock period is 10 time units
always #5 clk = ~clk;

endmodule
